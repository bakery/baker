import { TouchableHighlight, NavigationExperimental } from 'react-native';
import DrawerLayoutAndroid from 'DrawerLayoutAndroid';
import ToolbarAndroid from 'ToolbarAndroid';
import { actions as navigationActions } from 'react-native-navigation-redux-helpers';

const { jumpTo } = navigationActions;

const androidToolbarStyle = {
  backgroundColor: '#E9EAED',
  height: 56,
};

class {{componentName}} extends Component {
  render() {
    const { {{reducerName}}, dispatch } = this.props;
    const onNavigate = (action) => {
      this.drawer.closeDrawer();
      dispatch(action);
    };

    const navigationView = (
      <View style={ styles.container }>
        { {{reducerName}}.routes.map( (t, i) => {
          return (
            <TouchableHighlight
              onPress={ () => onNavigate(jumpTo(i, {{reducerName}}.key)) }
              key={ t.key }>
              <Text>{ t.title }</Text>
            </TouchableHighlight>
          );
        })}
      </View>
    );

    return (
      <DrawerLayoutAndroid
        ref={(drawer) => { this.drawer = drawer; }}
        drawerWidth={300}
        drawerPosition={DrawerLayoutAndroid.positions.Left}
        renderNavigationView={() => navigationView}>
        {this._renderContent()}
      </DrawerLayoutAndroid>
    );
  }

  _renderTabContent(tab) {
    // XX: replace this with code to render specific components/containers
    // corresponding to tabs in your app, e.g.
    // if (tab.key === 'maps') {
    //   return <MapView />;
    // }

    return (
      <View style={ styles.container }>
        <Text>Generic Tab</Text>
      </View>
    );
  }

  _renderContent() {
    const selectedTab = this.props.{{reducerName}}.routes[this.props.{{reducerName}}.index];
    const navigationIcon = { uri: 'http://placehold.it/56x56' };
    return (
      <View style={ styles.container }>
        <ToolbarAndroid
          style={androidToolbarStyle}
          navIcon={navigationIcon}
          onIconClicked={() => this.drawer.openDrawer()}
          title={selectedTab.title}
        />
        {this._renderTabContent(selectedTab)}
      </View>
    );
  }
}

{{> mapDispatchAndPropsAndConnect }}